/*
 * (C) Copyright University of New Hampshire, 2006
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
 * Place - Suite 330, Boston, MA 02111-1307 USA.
 *
 * Author(s):
 *     Donald A. Barre <dbarre@unh.edu>
 */

#include "RptEntryAndRdr.h"
#include "EventHelper.h"
#include "TimeoutInfo.h"

using namespace ns_saHpiEventGet;

/*****************************************************************************
 * Constructor
 *****************************************************************************/

RptEntryAndRdr::RptEntryAndRdr(char *line) : SubscribeTestCase(line) {
}

/*****************************************************************************
 * Return the name of the test case.
 *****************************************************************************/

const char *RptEntryAndRdr::getName() {
    return "RptEntryAndRdr";
}

/*****************************************************************************
 * Return the description of the test case.
 *****************************************************************************/

const char *RptEntryAndRdr::getDescription() {
    return "For an event generated by an entity, the <i>Rdr</i> and\n"
           "<i>RptEntry</i> parameters will contain the data associated with\n"
           "that entity. Furthermore, the <i>RptEntry->ResourceCapabilities</i>\n"
           "field will not be zero.";
}

/*****************************************************************************
 * Return the precondition of the test case.
 *****************************************************************************/

const char *RptEntryAndRdr::getPrecondition() {
    return "Requires a sensor for which a SAHPI_ET_SENSOR_ENABLE_CHANGE\n"
           "event can be generated.";
}

/*****************************************************************************
 * Return the expected error code.
 *****************************************************************************/

SaErrorT RptEntryAndRdr::getExpectedReturn() {
    return SA_OK;
}

/*****************************************************************************
 * Run the test.
 *
 * Generate a sensor change event and then wait for that event to show up
 * in the event queue.  It's RptEntry and Rdr must be the same as that for
 * original sensor.
 *****************************************************************************/

HpiTestStatus RptEntryAndRdr::runEventTest(SaHpiSessionIdT sessionId) {
    HpiTestStatus status;
    SaHpiEventT event;
    SaHpiRdrT rdr;
    SaHpiRdrT eventRdr;
    SaHpiRptEntryT rptEntry;
    SaHpiRptEntryT eventRptEntry;
    EventMatcher matcher;

    status.add(TRACE, EventHelper::generateSensorChangeEvent(sessionId, &rptEntry,
                                                             &rdr, &matcher));
    if (status.isOkay()) {
        bool foundEvent;
        status.add(TRACE, 
            EventHelper::waitForEvent(sessionId, matcher, &event, 
                                      &eventRdr, &eventRptEntry, NULL, &foundEvent));
        if (status.isOkay()) {
            if (!foundEvent) {
                status.assertError(TRACE, 
                    "Did not find the sensor change event that was expected.");
            } else {
                status.assertPass();

                if (rdr.RecordId != eventRdr.RecordId) {
                    status.assertFailure(TRACE,
                        "Returned Rdr does not correspond to the generated event.");
                } 

                if (rptEntry.EntryId != eventRptEntry.EntryId) {
                    status.assertFailure(TRACE,
                        "Returned RptEntry does not correspond to the generated event.");
                } else if (eventRptEntry.ResourceCapabilities == 0) {
                    status.assertFailure(TRACE,
                        "The RptEntry->ResourceCapabilities is zero.");
                }
            }
        }
    }

    return status;
}
