/*
 * (C) Copyright University of New Hampshire, 2006
 * (C) Copyright Emerson Network Power, 2009
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
 * Place - Suite 330, Boston, MA 02111-1307 USA.
 *
 * Author(s):
 *     Donald A. Barre <dbarre@unh.edu>
 *     Klaus Mittermaier <klaus.mittermaier@emerson.com>
 *     Lars Wetzel <lars.wetzel@emerson.com>
 */

#include "InvalidRequest.h"
#include "WatchdogHelper.h"

using namespace ns_saHpiWatchdogTimerReset;

/*****************************************************************************
 * Constants
 *****************************************************************************/

#define INITIAL_COUNT_SEC 60
#define INITIAL_COUNT (INITIAL_COUNT_SEC * 1000)
#define PRE_TIMEOUT_INTERVAL (INITIAL_COUNT - 1000)

/*****************************************************************************
 * Constructor
 *****************************************************************************/

InvalidRequest::InvalidRequest(char *line)
: HpiSessionTestCase(line) {
}

/*****************************************************************************
 * Return the name of the test case.
 *****************************************************************************/

const char *InvalidRequest::getName() {
    return "InvalidRequest";
}

/*****************************************************************************
 * Return the description of the test case.
 *****************************************************************************/

const char *InvalidRequest::getDescription() {
    return "If the Watchdog has been configured to issue a Pre-Timeout\n"
           "interrupt, and that interrupt has already occurrred, the\n"
           "saHpiWatchdogTimerReset() function will not reset the watchdog\n"
           "counter.";
}

/*****************************************************************************
 * Return the precondition of the test case.
 *****************************************************************************/

const char *InvalidRequest::getPrecondition() {
    return "Requires one or more watchdog timers that are not running.";
}

/*****************************************************************************
 * Run the test.
 *
 * Subscribe for events to get the watchdog events.  Then get all of the
 * watchdog timers and test them.
 *****************************************************************************/

HpiTestStatus InvalidRequest::runSessionTest(SaHpiSessionIdT sessionId) {
    HpiTestStatus status;

    // pause in order to avoid events from previous test cases.
    pauseForEventProcessing();

    SaErrorT error = saHpiSubscribe(sessionId);
    if (error != SA_OK) {
        status.assertError(TRACE, SUBSCRIBE, SA_OK, error);
    } else {
        watchdogCount = 0;

        status.add(TRACE, WatchdogHelper::findAllWatchdogs(sessionId, this));
        if (status.isOkay()) {
            if (watchdogCount == 0) {
                status.assertNotSupport();
            } else {
                status.assertPass(); // assume all will go well
                status.add(TRACE, testWatchdogs(sessionId));
            }
        }

        error = saHpiUnsubscribe(sessionId);
        status.checkError(TRACE, UNSUBSCRIBE, error);
    }

    return status;
}


/*****************************************************************************
 * * When findAllWatchdogs finds a watchdog, this method is invoked.
 * * We will only test watchdogs that are not running.
 * *****************************************************************************/

void InvalidRequest::addWatchdog(SaHpiResourceIdT resourceId,
 				 SaHpiWatchdogNumT watchdogNum,
 				 SaHpiWatchdogT &origWatchdog) {
#if 0  
SaHpiWatchdogT watchdog;
  
  // Test values - not each watchdog must support this settings
  watchdog.Log = SAHPI_TRUE;
  watchdog.Running = SAHPI_FALSE;
  watchdog.TimerAction = SAHPI_WA_NO_ACTION;
  //    watchdog.PretimerInterrupt = SAHPI_WPI_NONE;
  watchdog.PretimerInterrupt = SAHPI_WPI_MESSAGE_INTERRUPT;
  watchdog.PreTimeoutInterval = PRE_TIMEOUT_INTERVAL;
  watchdog.InitialCount = INITIAL_COUNT;
  watchdog.TimerUse = SAHPI_WTU_OEM;
  watchdog.TimerUseExpFlags = 0;

#endif  
  if (watchdogCount < MAX_WATCHDOGS && !origWatchdog.Running) {

#if 0   
    SaErrorT error = saHpiWatchdogTimerSet(sessionId, resourceId, 
					   watchdogNum, &watchdog);
    // INVALID_DATA is also a valid value but doesn't work in this test case
    if (error == SA_OK) {
#endif     
      // Now we can add the watchdog to the test subjects
        watchdogData[watchdogCount].resourceId = resourceId;
        watchdogData[watchdogCount].watchdogNum = watchdogNum;
        watchdogData[watchdogCount].origWatchdog = origWatchdog;
        watchdogCount++;
#if 0
    } 
#endif
  }
}

/*****************************************************************************
 * Test the watchdogs.
 *
 * Start each watchdog timer with a pretimer interrupt.  After they are
 * running, poll for the watchdog events.
 *****************************************************************************/

HpiTestStatus InvalidRequest::testWatchdogs(SaHpiSessionIdT sessionId) {
    HpiTestStatus status;
    SaHpiWatchdogT watchdog;

    watchdog.Log = SAHPI_TRUE;
    watchdog.Running = SAHPI_FALSE;
    watchdog.TimerAction = SAHPI_WA_NO_ACTION;
    //    watchdog.PretimerInterrupt = SAHPI_WPI_NONE;
    watchdog.PretimerInterrupt = SAHPI_WPI_MESSAGE_INTERRUPT;
    watchdog.PreTimeoutInterval = PRE_TIMEOUT_INTERVAL;
    watchdog.InitialCount = INITIAL_COUNT;
    watchdog.TimerUse = SAHPI_WTU_OEM;
    watchdog.TimerUseExpFlags = 0;

    // start each watchdog
 for (int i = 0; i < watchdogCount && !(/* isBreakOnError() && */ status.hasFault()); i++) 
     {
        SaHpiResourceIdT resourceId = watchdogData[i].resourceId;
        SaHpiWatchdogNumT watchdogNum = watchdogData[i].watchdogNum;

        pushLocation("Resource", resourceId);
        pushLocation("Watchdog", watchdogNum);

	//      watchdog.TimerUse = watchdogData[i].origWatchdog.TimerUse;
        SaErrorT error = saHpiWatchdogTimerSet(sessionId, resourceId, 
                                               watchdogNum, &watchdog);
        if (error != SA_OK) {
            status.assertError(TRACE, WATCHDOG_TIMER_SET, SA_OK, error);
        } else {
            error = saHpiWatchdogTimerReset(sessionId, resourceId, watchdogNum);
            if (error != SA_OK) {
                status.assertError(TRACE, WATCHDOG_TIMER_RESET, SA_OK, error);
            }
        }

        popLocation();
        popLocation();
    }

    if (status.isOkay()) {

        // make sure we wait more than enough time for each
        // pretimer interrupt to occur.
        //
        secSleep(3);
 for (int i = 0; i < watchdogCount && !(/* isBreakOnError() && */ status.hasFault()); i++) 
         {
 
            SaHpiResourceIdT resourceId = watchdogData[i].resourceId;
            SaHpiWatchdogNumT watchdogNum = watchdogData[i].watchdogNum;

            pushLocation("Resource", resourceId);
            pushLocation("Watchdog", watchdogNum);

            SaErrorT error = saHpiWatchdogTimerReset(sessionId, resourceId, watchdogNum);
            if (error != SA_ERR_HPI_INVALID_REQUEST) {
                status.assertFailure(TRACE, WATCHDOG_TIMER_RESET, SA_ERR_HPI_INVALID_REQUEST, error);
            }

            popLocation();
            popLocation();
        }
    }

    status.add(TRACE, restoreWatchdogs(sessionId));

    return status;
}

/*****************************************************************************
 * Restore the watchdogs to the original settings, but clear the Expriation
 * flag for the TimerUse.  Restoring the watchdog will also stop any that
 * are running due to this test.
 *****************************************************************************/

HpiTestStatus InvalidRequest::restoreWatchdogs(SaHpiSessionIdT sessionId) {
    HpiTestStatus status;

    for (int i = 0; i < watchdogCount; i++) {
        SaHpiWatchdogT watchdog = watchdogData[i].origWatchdog;
        watchdog.TimerUseExpFlags = WatchdogHelper::getExpirationFlag(watchdog.TimerUse);
        SaErrorT error = saHpiWatchdogTimerSet(sessionId, watchdogData[i].resourceId, 
                                               watchdogData[i].watchdogNum, &watchdog);
        if (error != SA_OK) {
            status.assertError(TRACE, WATCHDOG_TIMER_SET, SA_OK, error);
        } 
    }

    return status;
}

